/*
执行用时：4 ms, 在所有 C++ 提交中击败了93.76%的用户
内存消耗：8.4 MB, 在所有 C++ 提交中击败了92.88%的用户
通过测试用例：45 / 45
*/


// 空间压缩动规
class Solution {
public:
    int calculateMinimumHP(vector<vector<int>>& dungeon) {
        int m = dungeon.size(), n = dungeon[0].size();
        vector<int> dp(n);
        // 边界条件：
        dp[n-1] = max(1, 1 - dungeon[m-1][n-1]);
        for(int last = m - 1, j = n - 2;  j >= 0;  j--)
            dp[j] = max(1, dp[j+1] - dungeon[last][j]);
       // 动态规划：
        for(int i = m - 2, last = n - 1;  i >= 0;  i--){
            dp[last] = max(1, dp[last] - dungeon[i][last]);
            for(int j = n - 2;  j >= 0;  j--)
                if(dp[j] < dp[j+1])
                    dp[j] = max(1, dp[j] - dungeon[i][j]);
                else
                    dp[j] = max(1, dp[j+1] - dungeon[i][j]);
        }
        return dp[0];
    }
};



/*
// 原始动规
class Solution {
public:
    int calculateMinimumHP(vector<vector<int>>& dungeon) {
        int m = dungeon.size(), n = dungeon[0].size();
        vector<vector<int>> dp(m, vector<int>(n));
        // 边界条件：
        dp[m-1][n-1] = max(1, 1 - dungeon[m-1][n-1]);
        for(int i = m - 2, last = n - 1;  i >= 0;  i--)
            if(dungeon[i][last] >= dp[i+1][last])
                dp[i][last] = 1;
            else
                dp[i][last] = dp[i+1][last] - dungeon[i][last];
        for(int j = n - 2, last = m - 1;  j >= 0;  j--)
            if(dungeon[last][j] >= dp[last][j+1])
                dp[last][j] = 1;
            else
                dp[last][j] = dp[last][j+1] - dungeon[last][j];
        // 动态规划：
        for(int i = m - 2; i >= 0; i--)
            for(int j = n - 2; j >= 0; j--)
                if(dp[i+1][j] < dp[i][j+1]){
                    if(dungeon[i][j] >= dp[i+1][j])
                        dp[i][j] = 1;
                    else
                        dp[i][j] = dp[i+1][j] - dungeon[i][j];
                }
                else{
                    if(dungeon[i][j] >= dp[i][j+1])
                        dp[i][j] = 1;
                    else
                        dp[i][j] = dp[i][j+1] - dungeon[i][j];
                }
        return dp[0][0];
    }
};
*/
