class Solution {
public:
    int count = 0;
    vector<int> tempNums;  //归并排序不能原地合并,用于避免在归并排序中频繁创建临时数组
    
    int reversePairs(vector<int>& nums) {
        tempNums.resize( nums.size() );
        mergeSort(nums, 0, nums.size()-1);
        return count;
    }

    void mergeSort(vector<int>& nums,  int low,  int high){
        if(low >= high)  return;
        int mid = (low+high)/2,  left = low,  right = mid + 1,  i = low;
        mergeSort(nums, low, mid);
        mergeSort(nums, mid+1, high);
        //后序遍历
        int maxRightMargin = mid + 1;
        for(int i=low; i<=mid; i++){
            while(maxRightMargin <= high  &&  nums[i] > (long long)2*nums[maxRightMargin])
                maxRightMargin++;
            count += maxRightMargin - mid - 1;
        }
        //每一层递归都用tempNums[low:high]储存nums[low:high]排序后的结果
        while(left <= mid  &&  right <= high)
            if(nums[left] < nums[right])
                tempNums[i++] = nums[left++];
            else
                tempNums[i++] = nums[right++];
        while(left <= mid)
            tempNums[i++] = nums[left++];
        while(right <= high)
            tempNums[i++] = nums[right++];
        for(int i=low; i<=high; i++)
            nums[i] = tempNums[i];
    }
};
