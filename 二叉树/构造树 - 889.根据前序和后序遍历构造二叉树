/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* constructFromPrePost(vector<int>& preorder, vector<int>& postorder) {
        if(preorder.size() == 0)
            return nullptr;
        int num = nodeNumOfLeftSubtree(preorder, postorder);  //左子树的节点个数
        vector<int>  leftPreorder(preorder.begin()+1, preorder.begin()+1+num);
        vector<int> rightPreorder(preorder.begin()+num+1, preorder.end());
        vector<int>  leftPostorder(postorder.begin(), postorder.begin()+num);
        vector<int> rightPostorder(postorder.begin()+num, postorder.end());
        return new TreeNode( preorder[0],  constructFromPrePost(leftPreorder, leftPostorder),  constructFromPrePost(rightPreorder, rightPostorder) );
    }
//其实不需要nodeNumOfLeftSubtree函数：把前序遍历序列的第二个元素作为左子树的根节点,然后在后序遍历序列中寻找左子树的根节点,即可确定出左子树的索引边界进而得知右子树的索引边界
    int nodeNumOfLeftSubtree(vector<int> preorder, vector<int> postorder){
        for(int num=1;  num<preorder.size();  num++){
            set<int> s1, s2;
            for(int i=1;  i<=num;  i++)
                s1.insert(preorder[i]),  s2.insert(postorder[i-1]);
            if(s1 == s2)
                return num;
        }
        return 0;
    }
};
