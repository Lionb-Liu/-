//KRUSKAL算法
//并查集
class UnionFind {
    vector<int> parent;
public:
    UnionFind(int n){
        parent.resize(n);
        for(int i=1; i<n; i++)  parent[i] = i;
    }

    void _union(int a, int b){
        parent[find(a)] = find(b);
    }

    int find(int a){
        if(parent[a] != a)  //路径压缩
            parent[a] = find(parent[a]);
        return parent[a];
    }
};


//边,记录两个端点的节点编号和长度
class Edge {
public:
    int a, b, length;
    Edge(int a, int b, int length) : a(a), b(b), length(length) {}
    bool operator<(Edge edge) {return length < edge.length;}
};


class Solution {
public:
    int minCostConnectPoints(vector<vector<int>>& points) {
        int n = points.size(),  ans = 0;
        //生成两两节点之间的边,存储在edges,然后用KRUSKAL最小生成树算法:
        vector<Edge> edges;
        for(int i=0; i<n; i++)
            for(int j=0; j<i; j++){
                Edge edge( j, i, distance(points[j], points[i]) );
                edges.push_back(edge);
            }
        sort(edges.begin(), edges.end());
        //用并查集防止在KRUSKAL最小生成树算法的过程中产生环:
        UnionFind uf(n);
        for(Edge edge : edges)
            if( uf.find(edge.a) != uf.find(edge.b) ){
                uf._union(edge.a, edge.b); //将当前edge添加到最小生成树中
                ans += edge.length;
            }
        return ans;
    }

    int distance(vector<int> point1,  vector<int> point2){
        return abs(point1[0] - point2[0]) + abs(point1[1] - point2[1]);
    }
};





/*
//PRIM算法
//边:记录两个端点的节点编号和边的长度
class Edge {
public:
    int from, to, length;
    Edge(int from=0, int to=0, int length=0) : from(from), to(to), length(length) {}
    //注意此处在重载是必须设成友元函数,否则无法将Edge类型的变量加入优先队列中
    friend bool operator<(Edge edge1, Edge edge2) {return edge1.length > edge2.length;}
};

class Solution {
public:
    int minCostConnectPoints(vector<vector<int>>& points) {
        int n = points.size(),  ans = 0;
        priority_queue<Edge>  q;
        vector<bool> visited(n);
        //处理节点0,把所有和节点0相连的边都push进优先队列:
        visited[0] = true;
        for(int i=1; i<n; i++)
            q.push(  Edge(0, i, distance(points[0], points[i]))  );
        //广度优先搜索:
        Edge edge;
        while(!q.empty()){
            edge = q.top();
            q.pop(); //优先队列q的队首始终是长度最小的边
            if(visited[edge.to])
                continue;
            visited[edge.to] = true;
            ans += edge.length; //当前的边edge是最小生成树的组成部分
            for(int i=0; i<n; i++)
                if(!visited[i]) //注意下面一行中的 edge.to 和 i 不能颠倒前后顺序 !!!!!!!!!
                    q.push(  Edge(edge.to, i, distance(points[edge.to], points[i]))  );
        }
        return ans;
    }

    //计算节点1和节点2之间的距离
    int distance(vector<int> point1,  vector<int> point2){
        return abs(point1[0] - point2[0]) + abs(point1[1] - point2[1]);
    }
};
*/
