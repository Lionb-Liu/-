/*
执行用时：388 ms, 在所有 C++ 提交中击败了 94.42% 的用户
内存消耗：172.7 MB, 在所有 C++ 提交中击败了 82.97% 的用户
*/

class LinkNode {
public:
    int key, val, freq = 0;
    LinkNode *prev, *next;
    LinkNode(int key=0, int val=0, LinkNode *prev=NULL, LinkNode *next=NULL) : key(key),val(val),prev(prev),next(next) {}
};


class LFUCache {
    int size = 0, capacity;
    LinkNode *head,  *tail;
    unordered_map<int,LinkNode*> keyToNode;
    map<int,LinkNode*> freqToNode; //记录访问频次为i的节点中,最久未被访问的节点freqToNode[i]

public:
    LFUCache(int capacity) : capacity(capacity) {
        head = new LinkNode;
        tail = new LinkNode;
        head->next = tail;   head->freq = INT_MAX;
        tail->prev = head; //tail->freq = 0;
        freqToNode[INT_MAX] = head;
        freqToNode[0] = tail;
    }
    
    int get(int key) {
        return keyToNode.find(key) == keyToNode.end() ? -1 : move(keyToNode[key]);
    }
    
    void put(int key, int value) {
        if(keyToNode.find(key) == keyToNode.end()){
            if(capacity == 0)  return;
            else  if(size < capacity)  ++size;
            else  deleteNode(tail->prev);
            LinkNode *node = new LinkNode(key, value, tail->prev, tail);
            tail->prev->next = node;
            tail->prev = node;
            keyToNode[key] = node;
            move(node);
        }
        else{
            LinkNode *node = keyToNode[key];
            node->val = value;
            move(node);
        }
    }

    //将node增加一个访问频次,并且在链表中移动到该频次的第一个位置
    int move(LinkNode* &node){
        int temp = node->freq++;
        if(freqToNode[temp] == node)
            if(node->prev->freq == temp)  freqToNode[temp] = node->prev;
            else  freqToNode.erase(temp);
        if(freqToNode.find(++temp) == freqToNode.end())
            freqToNode[temp] = node;
        LinkNode *precursor = ( ++freqToNode.find(temp) ) -> second;
        //从链表中删除node
        node->prev->next = node->next;
        node->next->prev = node->prev;
        //把node添加到precursor的后面
        node->prev = precursor;
        node->next = precursor->next;
        precursor->next = node;
        node->next->prev = node;
        return node->val;
    }

    //将尾部的节点node从cache和LinkedList中删除
    void deleteNode(LinkNode* node){
        int temp = node->freq;
        if(freqToNode[temp] == node)
            if(node->prev->freq == temp)  freqToNode[temp] = node->prev;
            else  freqToNode.erase(temp);
        keyToNode.erase(node->key);
        node->prev->next = tail;
        tail->prev = node->prev;
        delete node;
    }
};
